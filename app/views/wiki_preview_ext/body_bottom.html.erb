<%
	controller2param = {
		"WikiController" => {
			:url2preview => lambda {url_for(:controller => 'wiki', :action => 'preview', :project_id => @project, :id => @page.title)},
			:form_id2serialize => "wiki_form",
			:selector2auto_preview_field => "#content_text",
			:attach_required => lambda {
				if context[:controller].action_name == "edit" ||
					(context[:controller].action_name == "show" && @page.new_record?)
					return true
				end
				return false
			}
		},
		"IssuesController" => {
			:url2preview => lambda {
				if context[:controller].action_name == "new"
					preview_new_issue_path(:project_id => @issue.project)
				else
					preview_edit_issue_path(:project_id => @project, :id => @issue)
				end
			},
			:form_id2serialize => "issue-form",
			:selector2auto_preview_field => "#issue_description,#issue_notes",
			:attach_required => lambda {
				if context[:controller].action_name == "show" ||
					context[:controller].action_name == "new"
					return true
				end
				return false
			}
		},
	}


	key = "#{context[:controller].class.name}"
	param = controller2param[key]

	auto_preview_duration = Setting.plugin_redmine_wiki_preview_ext['preview_duration'].to_f
%>

<% if !param.nil? && param[:attach_required].call %>

<script type="text/javascript">
<!--
jQuery(function($) {
	"use strict";

	var preview = $("#preview");
	if (preview.length == 0) {
		return;
	}

	function applyPreviewHere() {
		$("div.jstElements").each(function() {
			addPreviewHere(this);
		});
	}
	applyPreviewHere();

	var old_replaceIssueFormWith = window.replaceIssueFormWith;
	if (old_replaceIssueFormWith) {
		window.replaceIssueFormWith = function() {
			old_replaceIssueFormWith.apply(this, arguments);
			applyPreviewHere();
		};
	}

	var previewHereCount = 0;
	function addPreviewHere(toolbar) {

		var previous = $(toolbar).find(".preview-here");
		if (previous.length > 0) {
			return ;
		}

		var preview_here = $("<a/>")
			.attr({
				id: "preview-here" + previewHereCount,
				"class": "preview-here",
				href: "#"
			})
			.text('<%=j t :preview_here%>');

		preview_here.on('click', function() {

			var preview_here_offset = preview_here.offset();
			var preview_offset = $('#preview').offset();
			preview.animate({
				top: "+=" + (preview_here_offset.top - preview_offset.top + preview_here.height()),
				left: "+=" + (preview_here_offset.left - preview_offset.left),
				duration: 0.8
			});
			update_preview_area();

			return false;
		});
	
		$(toolbar).append(preview_here);
		previewHereCount++;
	}

	preview.css({
		cursor: "move",
	});
		
	preview.draggable({
		cursor: "move",
		opacity: 0.8
	});

	var update_preview_area = function() {
		submitPreview(
			'<%=j param[:url2preview].call %>', 
			'<%=j param[:form_id2serialize] %>',
			"preview"
		);
	};


	<% if auto_preview_duration > 0 %>
	$("<%=j param[:selector2auto_preview_field] %>").each(function() {
		var field_to_watch = $(this);
		var	timer;
		var prev_val;
		var reset_timer = function(duration) {
			if (timer != undefined) {
				clearTimeout(timer);
			}

			timer = setTimeout(function() {
				var current_val = field_to_watch.val();
				if (prev_val != current_val) {
					update_preview_area();
					prev_val = current_val;
				};
			}, duration);
		};

		field_to_watch.on("keyup click mousemove", function() { 
			reset_timer(<%=j auto_preview_duration.to_s %> * 1000); 
		});
	});
	<% end %>
});
// -->
</script>

<% end %>

